<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
colour = c_red;
instance_create(0, 0, oMouth);

eye1_init_xposition = x - 4;
eye1_init_yposition = y - 4;

eye1_x = eye1_init_xposition;
eye1_y = eye1_init_yposition;
eye1_height = 1;
eye1_width = 1.5;


eye2_x = x + 3;
eye2_y = y - 3.5;

eye2_init_height = 1.5;
eye2_height = init_height;
eye2_width = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
if (global.gamepads[0] == true)
{
    colour = c_blue;
    if ( (gamepad_axis_value(0, gp_axislh) != 0) or (gamepad_axis_value(0, gp_axislv) != 0) )
    {
        direction = point_direction(0, 0, gamepad_axis_value(0, gp_axislh), gamepad_axis_value(0, gp_axislv));
        speed = 4;
    }
    else
    {
        speed = 0;
    }
    if ( (gamepad_axis_value(0, gp_axisrh) != 0) or (gamepad_axis_value(0, gp_axisrv) != 0) )
    {
        instance_create(x + (gamepad_axis_value(0, gp_axisrh))*5, y + (gamepad_axis_value(0, gp_axisrv))*5, oPuke);
        if (!audio_is_playing(sndPuke))
        {
            audio_play_sound(sndPuke, 1, false);
        }
    }
}

if keyboard_check(vk_left)
{
    x -= 2;
}
else if keyboard_check(vk_right)
{
    x += 2;
}
if keyboard_check(vk_up)
{
    y -= 2;
}
else if keyboard_check(vk_down)
{
    y += 2;
}



if (!instance_exists(oEye1))
{
    instance_create(x, y, oEye1);
}
if (!instance_exists(oEye2))
{
    instance_create(x, y, oEye2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eyes

if ( (gamepad_axis_value(0, gp_axisrh) != 0) or (gamepad_axis_value(0, gp_axisrv) != 0) )
{
    eye1_x += random(4) - 2;
    eye1_y += random(4) - 2;
    
    eye2_height = eye2_height / 2;
}
else
{
    eye1_x = init_xposition;
    eye1_y = init_yposition;
    
    eye2_height = eye2_init_height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Images
surface_set_target(global.screen);
    draw_set_colour(colour);
    draw_circle(x, y, 10, false);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eyes
surface_set_target(global.screen);
    draw_set_colour(c_yellow);
    draw_rectangle(eye1_x - width, eye1_y - height, eye1_x + width, eye1_y + height, false);
    draw_rectangle(eye2_x - width, eye2_y - height, eye2_x + width, eye2_y + height, false);
surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
